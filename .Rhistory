print(overlapping_ecoregions_df)
# Step 9: Export the table as a CSV
write_csv(overlapping_ecoregions_df, "OverlappingEcoregions.csv")
library(sf)
library(terra)
library(dplyr)
library(here)
library(terra)
# Step 1: Load Pinyon Jay range and get bounding box
pj_range <- st_read(here("1_Data", "pinjay_range_2022", "pinjay_range_2022.gpkg"))
pj_bbox <- st_as_sfc(st_bbox(pj_range), crs = st_crs(pj_range))  # bbox as sf polygon
# Step 2: Load and transform Level II ecoregions
l2_eco <- st_read(here("1_Data", "na_cec_eco_l2", "NA_CEC_Eco_Level2.shp")) %>%
st_transform(crs = 4326)
# Step 3: Make geometries valid (important)
l2_eco <- st_make_valid(l2_eco)
# Step 4: Convert sf to SpatVector (terra format)
l2_vect <- vect(l2_eco)
library(sf)
library(terra)
library(dplyr)
library(here)
# Step 1: Load Pinyon Jay range and get bounding box
pj_range <- st_read(here("1_Data", "pinjay_range_2022", "pinjay_range_2022.gpkg"))
pj_bbox <- st_as_sfc(st_bbox(pj_range), crs = st_crs(pj_range))  # bbox as sf polygon
# Step 2: Load and transform Level II ecoregions
l2_eco_raw <- st_read(here("1_Data", "na_cec_eco_l2", "NA_CEC_Eco_Level2.shp")) %>%
st_transform(crs = 4326)
# Step 3: Fix invalid geometries *and realign attributes*
l2_eco_valid <- st_make_valid(l2_eco_raw)
l2_eco <- st_sf(data.frame(l2_eco_valid, geometry = st_geometry(l2_eco_valid)))  # sync attributes + geometry
# Step 4: Convert both PJ bbox and ecoregions to terra SpatVectors
l2_vect <- vect(l2_eco)
# Load required packages
library(sf)
library(dplyr)
library(here)
# Step 1: Read the Pinyon Jay range (GeoPackage)
pj_range <- st_read(here("1_Data", "pinjay_range_2022", "pinjay_range_2022.gpkg"))
# Step 2: Read the Level II ecoregions shapefile
l2_eco <- st_read(here("1_Data", "na_cec_eco_l2", "NA_CEC_Eco_Level2.shp"))
# Step 3: Ensure CRS match
if (st_crs(l2_eco) != st_crs(pj_range)) {
l2_eco <- st_transform(l2_eco, st_crs(pj_range))
}
# Step 4: Fix geometry issues if any
l2_eco <- st_make_valid(l2_eco)
# Step 5: Identify overlapping ecoregions (keep entire polygons)
overlapping_l2 <- l2_eco[st_intersects(l2_eco, pj_range, sparse = FALSE), ]
# Optional: Preview names or codes
unique(overlapping_l2$NA_L2NAME)
# Read in your bounding box GeoJSON
pj_bbox <- st_read("PJRangeBB.geojson")
# Plot overlapping ecoregions and bounding box
ggplot() +
geom_sf(data = overlapping_l2, fill = "lightblue", color = "gray30", size = 0.3) +
geom_sf(data = pj_bbox, fill = NA, color = "red", size = 1) +
labs(
title = "Level II Ecoregions Overlapping Pinyon Jay Range Bounding Box",
caption = "Red = bounding box | Blue = overlapping L2 ecoregions"
) +
theme_minimal()
library(ggplot2)
# Read in your bounding box GeoJSON
pj_bbox <- st_read("PJRangeBB.geojson")
# Plot overlapping ecoregions and bounding box
ggplot() +
geom_sf(data = overlapping_l2, fill = "lightblue", color = "gray30", size = 0.3) +
geom_sf(data = pj_bbox, fill = NA, color = "red", size = 1) +
theme_minimal()
# Step 6: Export as GeoJSON for upload to GEE
st_write(overlapping_l2, "1_Data/l2_ecoregions_overlapping_pj.geojson", delete_dsn = TRUE)
st_write(overlapping_l2, "output/l2_ecoregions_overlapping_pj.shp", delete_dsn = TRUE)
dir.create("L2_Ecoregions", showWarnings = FALSE)
st_write(overlapping_l2, "L2_Ecoregions/l2_ecoregions_overlapping_pj.shp", delete_dsn = TRUE)
warnings()
overlapping_l2_clean <- overlapping_l2 %>%
select(-Shape_Area, -Shape_Leng)  # drop problematic columns
st_write(overlapping_l2_clean, "L2_Ecoregions/l2_ecoregions_overlapping_pj.shp", delete_dsn = TRUE)
# Load required packages
library(sf)
library(dplyr)
library(here)
library(ggplot2)
# Step 1: Read the Pinyon Jay range (GeoPackage)
pj_range <- st_read(here("1_Data", "pinjay_range_2022", "pinjay_range_2022.gpkg"))
# Load required packages
pacman::p_load(dplyr, tidyr, here, ggplot2, sf, rnaturalearth, rnaturalearthdata, readr)
# Step 1: Read the Pinyon Jay range Geopackage
pinyon_jay_range <- st_read("1_Data/pinjay_range_2022/pinjay_range_2022.gpkg")
# Step 1: Read the Pinyon Jay range Geopackage
pinyon_jay_range <- st_read("1_Data/Boundaries/pinjay_range_2022/pinjay_range_2022.gpkg")
# Step 2: Create and adjust the bounding box
bbox <- st_bbox(pinyon_jay_range)
bbox["ymin"] <- bbox["ymin"] - 1  # Extend southern boundary (adjust value as needed)
bbox_sf <- st_as_sfc(bbox)
# Step 3: Add a buffer to the bounding box
buffer_distance <- 10000  # 10 km buffer
bbox_buffered <- st_buffer(bbox_sf, dist = buffer_distance)
# Step 4: Load North America map
north_america <- ne_countries(continent = "North America", scale = "medium", returnclass = "sf")
# Step 5: Visualize the data
ggplot() +
geom_sf(data = north_america, fill = "gray90", color = "black", size = 0.2) +
geom_sf(data = pinyon_jay_range, fill = "lightblue", color = "blue", alpha = 0.6) +
geom_sf(data = bbox_buffered, fill = NA, color = "red", linetype = "dashed", size = 1) +
coord_sf(
xlim = c(st_bbox(bbox_buffered)[1], st_bbox(bbox_buffered)[3]),
ylim = c(st_bbox(bbox_buffered)[2], st_bbox(bbox_buffered)[4])
) +
theme_minimal() +
labs(
x = "Longitude",
y = "Latitude"
)
pts <- read_csv(here("1_Data", "Thinned_eBird_PJ_Pts.csv"))
View(pts)
pts <- read_csv(here("1_Data", "Thinned_eBird_PJ_Pts.csv"))
pts.yr.er <- pts %>%
group_by(year, L2_CODE_NUM) %>%
summarise(no. pts = n_distinct())
pts.yr.er <- pts %>%
group_by(year, L2_CODE_NUM) %>%
summarise("no. pts" = n_distinct())
pts.yr.er <- pts %>%
group_by(year, L2_CODE_NUM) %>%
summarise(no_pts = n(), .groups = "drop")
View(pts.yr.er)
View(pts.yr.er)
total_pts <- pts %>%
filter(L2_CODE_NUM == 1) %>%       # Replace 4 with your target ecoregion
summarise(total_points = n())
print(total_pts)
total_pts <- pts %>%
filter(L2_CODE_NUM == 1) %>%       # Replace 4 with your target ecoregion
summarise(total_points = n())
total_pts <- pts %>%
filter(L2_CODE_NUM == 1) %>%       # Replace 4 with your target ecoregion
dplyr::summarise(total_points = n())
pts <- read_csv(here("1_Data", "Thinned_eBird_PJ_Pts.csv"))
pts.yr.er <- pts %>%
group_by(year, L2_CODE_NUM) %>%
summarise(no_pts = n(), .groups = "drop")
total_pts <- pts %>%
filter(L2_CODE_NUM == 1) %>%       # Replace 4 with your target ecoregion
dplyr::summarise(total_points = n())
# Load necessary libraries
library(arrow)
library(readxl)
library(sf)
library(dplyr)
library(ggplot2)
library(lubridate)
library(tidyr)
pts <- read_csv(here("1_Data", "Thinned_eBird_PJ_Pts.csv"))
library(tidyverse)
pts <- read_csv(here("1_Data", "Thinned_eBird_PJ_Pts.csv"))
library(here)
pts <- read_csv(here("1_Data", "Thinned_eBird_PJ_Pts.csv"))
pts.yr.er <- pts %>%
group_by(year, L2_CODE_NUM) %>%
summarise(no_pts = n(), .groups = "drop")
total_pts <- pts %>%
filter(L2_CODE_NUM == 1) %>%       # Replace 4 with your target ecoregion
dplyr::summarise(total_points = n())
print(total_pts)
citation("DHARMa")
# just points per ecoregion
pts.er <- pts %>%
group_by(L2_CODE_NUM) %>%
summarise(no_pts = n(), .groups = "drop")
View(pts.er)
# Load  packages
pacman::p_load(dplyr, tidyr, here, ggplot2, sf, rnaturalearth, rnaturalearthdata,
readr, ggrepel, patchwork)
# Load eBird PJ range
pj_range <- st_read("1_Data/Boundaries/pinjay_range_2022/pinjay_range_2022.gpkg")
# Reproject to US National Atlas Equal Area
pj_range_proj <- st_transform(pj_range, crs = 2163)
# Buffer in meters
pj_range_buff_proj <- st_buffer(pj_range_proj, dist = 60000)  # 10 km
# Reproject back to WGS84 if needed
pj_range_buff <- st_transform(pj_range_buff_proj, crs = 4326)
# Bring in PJ detections
pj_points_df <- read_csv("/Users/aen/Documents/ORISE_Postdoc/PinyonJayMacroecology/PJ_Data/eBird_PJ/ebird_pj_clean.csv")
# Make a copy before converting
pj_points <- pj_points_df %>%
mutate(lon = longitude, lat = latitude) %>%
st_as_sf(coords = c("lon", "lat"), crs = 4326)
ggplot() +
geom_sf(data = na, fill = "gray90", color = "black", size = 0.2) +
geom_sf(data = pj_range, fill = "lightblue", color = "blue", alpha = 0.5) +
geom_sf(data = pj_range_buff, fill = NA, color = "red", size = 1) +
geom_sf(data = pj_points, color = "purple", alpha = 0.25) +
coord_sf(xlim = st_bbox(pj_range_buff)[c("xmin", "xmax")],
ylim = st_bbox(pj_range_buff)[c("ymin", "ymax")]) +
theme_minimal()
# Filter PJ points to buffered range
pj_pts_clean <- st_filter(pj_points, pj_range_buff)
# Load and prep ecoregions & BCRs
ecoregions <- st_read("1_Data/Boundaries/na_cec_eco_l2/NA_CEC_Eco_Level2.shp") %>%
st_transform(st_crs(pj_points)) %>%
st_make_valid()
bcrs <- st_read("1_Data/Boundaries/BCRs.gdb") %>%
st_transform(st_crs(pj_points)) %>%
st_make_valid()
# Crop to buffered pj range
er_clip <- st_intersection(ecoregions, pj_range_buff)
bcr_clip <- st_intersection(bcrs, pj_range_buff) # not sure why SMO is missing
bcr_clip <- bcr_clip %>%
mutate(name_en = ifelse(is.na(name_en), "Sierra Madre Occidental", name_en))
ggplot() +
geom_sf(data = bcr_clip, aes(fill = name_en), color = "white", size = 0.5) +
geom_sf_text(data = bcr_clip, aes(label = name_en), size = 3, color = "black") +
geom_sf(data = pj_pts_clean, color = "orange", alpha = 0.25) +
coord_sf(xlim = st_bbox(pj_range_buff)[c("xmin", "xmax")],
ylim = st_bbox(pj_range_buff)[c("ymin", "ymax")]) +
theme_minimal() +
scale_fill_viridis_d(name = "BCR Name")
# Join filtered points and bcrs
pjpts_bcrs <- pj_pts_clean %>%
st_join(bcr_clip, join = st_intersects)
pjpts_bcrs_summ <- pjpts_bcrs %>%
st_drop_geometry() %>%
group_by(bcr_label, name_en) %>%
summarise(no. = n(), .groups = "drop")
# Export the things
st_write(pj_range_buff, "1_Data/CleanedRangeBCRsPts/pj_range_60kmbuff.shp",
delete_layer = TRUE)
st_write(bcr_clip, "1_Data/CleanedRangeBCRsPts/bcr_clip.shp",
delete_layer = TRUE)
View(bcr_clip)
pj_pts_clean
View(pj_pts_clean)
# Load  packages
pacman::p_load(dplyr, tidyr, here, ggplot2, sf, rnaturalearth, rnaturalearthdata,
readr, ggrepel, patchwork)
# Load eBird PJ range
pj_range <- st_read("1_Data/Boundaries/pinjay_range_2022/pinjay_range_2022.gpkg")
# Reproject to US National Atlas Equal Area
pj_range_proj <- st_transform(pj_range, crs = 2163)
# Buffer in meters
pj_range_buff_proj <- st_buffer(pj_range_proj, dist = 60000)  # 10 km
# Reproject back to WGS84 if needed
pj_range_buff <- st_transform(pj_range_buff_proj, crs = 4326)
# Bring in PJ detections
pj_points_df <- read_csv("/Users/aen/Documents/ORISE_Postdoc/PinyonJayMacroecology/PJ_Data/eBird_PJ/ebird_pj_clean.csv")
# Make a copy before converting
pj_points <- pj_points_df %>%
mutate(lon = longitude, lat = latitude) %>%
st_as_sf(coords = c("lon", "lat"), crs = 4326)
ggplot() +
geom_sf(data = na, fill = "gray90", color = "black", size = 0.2) +
geom_sf(data = pj_range, fill = "lightblue", color = "blue", alpha = 0.5) +
geom_sf(data = pj_range_buff, fill = NA, color = "red", size = 1) +
geom_sf(data = pj_points, color = "purple", alpha = 0.25) +
coord_sf(xlim = st_bbox(pj_range_buff)[c("xmin", "xmax")],
ylim = st_bbox(pj_range_buff)[c("ymin", "ymax")]) +
theme_minimal()
bcr_clip <- st_intersection(bcrs, pj_range_buff) # not sure why SMO is missing
bcr_clip <- bcr_clip %>%
mutate(name_en = ifelse(is.na(name_en), "Sierra Madre Occidental", name_en))
ggplot() +
geom_sf(data = bcr_clip, aes(fill = name_en), color = "white", size = 0.5) +
geom_sf_text(data = bcr_clip, aes(label = name_en), size = 3, color = "black") +
geom_sf(data = pj_pts_clean, color = "orange", alpha = 0.25) +
coord_sf(xlim = st_bbox(pj_range_buff)[c("xmin", "xmax")],
ylim = st_bbox(pj_range_buff)[c("ymin", "ymax")]) +
theme_minimal() +
scale_fill_viridis_d(name = "BCR Name")
# Join filtered points and bcrs
pjpts_bcrs <- pj_pts_clean %>%
st_join(bcr_clip, join = st_intersects)
pjpts_bcrs_summ <- pjpts_bcrs %>%
st_drop_geometry() %>%
group_by(bcr_label, name_en) %>%
summarise(no. = n(), .groups = "drop")
# Export the things
st_write(pj_range_buff, "1_Data/CleanedRangeBCRsPts/pj_range_60kmbuff.shp",
delete_layer = TRUE)
st_write(bcr_clip, "1_Data/CleanedRangeBCRsPts/bcr_clip.shp",
delete_layer = TRUE)
# Drop points geometry and write as CSV
pj_pts_filtered_df <- pj_pts_clean %>%
st_drop_geometry()
colnames(pj_pts_clean)
colnames(pj_pts_filtered_df)
write_csv(pj_pts_filtered_df, "1_Data/CleanedRangeBCRsPts/pj_pts_in_60km_buff_range.csv")
# Load  packages
pacman::p_load(dplyr, tidyr, here, ggplot2, sf, rnaturalearth, rnaturalearthdata,
readr, ggrepel, patchwork)
# Load eBird PJ range
pj_range <- st_read("1_Data/Boundaries/pinjay_range_2022/pinjay_range_2022.gpkg")
# Reproject to US National Atlas Equal Area
pj_range_proj <- st_transform(pj_range, crs = 2163)
# Buffer in meters
pj_range_buff_proj <- st_buffer(pj_range_proj, dist = 60000)  # 10 km
# Reproject back to WGS84 if needed
pj_range_buff <- st_transform(pj_range_buff_proj, crs = 4326)
# Bring in PJ detections
pj_points_df <- read_csv("/Users/aen/Documents/ORISE_Postdoc/PinyonJayMacroecology/PJ_Data/eBird_PJ/ebird_pj_clean.csv")
# Make a copy before converting
pj_points <- pj_points_df %>%
mutate(lon = longitude, lat = latitude) %>%
st_as_sf(coords = c("lon", "lat"), crs = 4326)
ggplot() +
geom_sf(data = na, fill = "gray90", color = "black", size = 0.2) +
geom_sf(data = pj_range, fill = "lightblue", color = "blue", alpha = 0.5) +
geom_sf(data = pj_range_buff, fill = NA, color = "red", size = 1) +
geom_sf(data = pj_points, color = "purple", alpha = 0.25) +
coord_sf(xlim = st_bbox(pj_range_buff)[c("xmin", "xmax")],
ylim = st_bbox(pj_range_buff)[c("ymin", "ymax")]) +
theme_minimal()
ggplot() +
# geom_sf(data = na, fill = "gray90", color = "black", size = 0.2) +
geom_sf(data = pj_range, fill = "lightblue", color = "blue", alpha = 0.5) +
geom_sf(data = pj_range_buff, fill = NA, color = "red", size = 1) +
geom_sf(data = pj_points, color = "purple", alpha = 0.25) +
coord_sf(xlim = st_bbox(pj_range_buff)[c("xmin", "xmax")],
ylim = st_bbox(pj_range_buff)[c("ymin", "ymax")]) +
theme_minimal()
# Filter PJ points to buffered range
pj_pts_clean <- st_filter(pj_points, pj_range_buff)
# Load and prep ecoregions & BCRs
ecoregions <- st_read("1_Data/Boundaries/na_cec_eco_l2/NA_CEC_Eco_Level2.shp") %>%
st_transform(st_crs(pj_points)) %>%
st_make_valid()
bcrs <- st_read("1_Data/Boundaries/BCRs.gdb") %>%
st_transform(st_crs(pj_points)) %>%
st_make_valid()
# Crop to buffered pj range
er_clip <- st_intersection(ecoregions, pj_range_buff)
bcr_clip <- st_intersection(bcrs, pj_range_buff) # not sure why SMO is missing
bcr_clip <- bcr_clip %>%
mutate(name_en = ifelse(is.na(name_en), "Sierra Madre Occidental", name_en))
ggplot() +
geom_sf(data = bcr_clip, aes(fill = name_en), color = "white", size = 0.5) +
geom_sf_text(data = bcr_clip, aes(label = name_en), size = 3, color = "black") +
geom_sf(data = pj_pts_clean, color = "orange", alpha = 0.25) +
coord_sf(xlim = st_bbox(pj_range_buff)[c("xmin", "xmax")],
ylim = st_bbox(pj_range_buff)[c("ymin", "ymax")]) +
theme_minimal() +
scale_fill_viridis_d(name = "BCR Name")
# Join filtered points and bcrs
pjpts_bcrs <- pj_pts_clean %>%
st_join(bcr_clip, join = st_intersects)
pjpts_bcrs_summ <- pjpts_bcrs %>%
st_drop_geometry() %>%
group_by(bcr_label, name_en) %>%
summarise(no. = n(), .groups = "drop")
# Export the things
st_write(pj_range_buff, "1_Data/CleanedRangeBCRsPts/pj_range_60kmbuff.shp",
delete_layer = TRUE)
st_write(bcr_clip, "1_Data/CleanedRangeBCRsPts/bcr_clip.shp",
delete_layer = TRUE)
# Drop points geometry and write as CSV
pj_pts_filtered_df <- pj_pts_clean %>%
st_drop_geometry()
colnames(pj_pts_clean)
colnames(pj_pts_filtered_df)
ggplot() +
geom_sf(data = bcr_clip, aes(fill = name_en), color = "white", size = 0.5) +
geom_sf(data = pj_pts_clean, color = "orange", alpha = 0.25) +
geom_sf_text(data = bcr_clip, aes(label = name_en), size = 3, color = "black") +
coord_sf(xlim = st_bbox(pj_range_buff)[c("xmin", "xmax")],
ylim = st_bbox(pj_range_buff)[c("ymin", "ymax")]) +
theme_minimal() +
scale_fill_viridis_d(name = "BCR Name")
ggplot() +
geom_sf(data = na, fill = "gray90", color = "black", size = 0.2) +
geom_sf(data = pj_range, fill = "lightblue", color = "blue", alpha = 0.5) +
geom_sf(data = pj_range_buff, fill = NA, color = "red", size = 1) +
geom_sf(data = pj_points, color = "purple", alpha = 0.25) +
coord_sf(xlim = st_bbox(pj_range_buff)[c("xmin", "xmax")],
ylim = st_bbox(pj_range_buff)[c("ymin", "ymax")]) +
theme_minimal()
library(cowplot)
# === Main map === #
p_main <- ggplot() +
geom_sf(data = bcr_clip, aes(fill = name_en), color = "white", size = 0.5) +
geom_sf(data = pj_pts_clean, color = "orange", alpha = 0.25, size = 0.5) +
geom_sf_text(data = bcr_clip, aes(label = name_en), size = 3, color = "black") +
coord_sf(xlim = st_bbox(pj_range_buff)[c("xmin", "xmax")],
ylim = st_bbox(pj_range_buff)[c("ymin", "ymax")]) +
theme_minimal() +
scale_fill_viridis_d(name = "BCR Name")
# === Inset map === #
# Load US map from rnaturalearth
us_states <- rnaturalearth::ne_states(country = "United States of America", returnclass = "sf")
devtools::install_github("ropensci/rnaturalearthhires")
install.packages('devtools')
library(cowplot)
devtools::install_github("ropensci/rnaturalearthhires")
# Main map
p_main <- ggplot() +
geom_sf(data = bcr_clip, aes(fill = name_en), color = "white", size = 0.5) +
geom_sf(data = pj_pts_clean, color = "orange", alpha = 0.25, size = 0.5) +
geom_sf_text(data = bcr_clip, aes(label = name_en), size = 3, color = "black") +
coord_sf(xlim = st_bbox(pj_range_buff)[c("xmin", "xmax")],
ylim = st_bbox(pj_range_buff)[c("ymin", "ymax")]) +
theme_minimal() +
scale_fill_viridis_d(name = "BCR Name")
# Inset map
# Load US map from rnaturalearth
us_states <- rnaturalearth::ne_states(country = "United States of America", returnclass = "sf")
# Limit to western US for visual clarity
west_states <- us_states %>%
filter(name %in% c("Arizona", "New Mexico", "Colorado", "Utah", "Nevada",
"California", "Oregon", "Washington", "Idaho", "Montana", "Wyoming"))
p_inset <- ggplot() +
geom_sf(data = west_states, fill = "gray95", color = "black", size = 0.2) +
geom_sf(data = pj_range_buff, fill = "red", alpha = 0.3, color = "red") +
theme_void() +
theme(panel.background = element_rect(fill = "white", color = NA))
# Combine main + inset
final_map <- ggdraw() +
draw_plot(p_main) +
draw_plot(p_inset, x = 0.65, y = 0.7, width = 0.3, height = 0.3)
# Print the combined map
print(final_map)
# Filter states to those that touch the pj_range_buff
pj_states <- st_filter(pj_range_buff, us_states)
p_inset <- ggplot() +
geom_sf(data = pj_states, fill = "gray95", color = "black", size = 0.2) +
geom_sf(data = pj_range_buff, fill = "red", alpha = 0.3, color = "red") +
theme_void() +
theme(panel.background = element_rect(fill = "white", color = NA))
# Combine main + inset
final_map <- ggdraw() +
draw_plot(p_main) +
draw_plot(p_inset, x = 0.65, y = 0.7, width = 0.3, height = 0.3)
# Print the combined map
print(final_map)
View(us_states)
class(us_states)
?st_transform
?st_intersection
# Filter states to those that touch the pj_range_buff
pj_states <- st_intersection(pj_range_buff, us_states)
p_inset <- ggplot() +
geom_sf(data = pj_states, fill = "gray95", color = "black", size = 0.2) +
geom_sf(data = pj_range_buff, fill = "red", alpha = 0.3, color = "red") +
theme_void() +
theme(panel.background = element_rect(fill = "white", color = NA))
# Combine main + inset
final_map <- ggdraw() +
draw_plot(p_main) +
draw_plot(p_inset, x = 0.65, y = 0.7, width = 0.3, height = 0.3)
# Print the combined map
print(final_map)
# Filter states to those that touch the pj_range_buff
pj_states <- st_intersection(us_states, pj_range_buff)
p_inset <- ggplot() +
geom_sf(data = pj_states, fill = "gray95", color = "black", size = 0.2) +
geom_sf(data = pj_range_buff, fill = "red", alpha = 0.3, color = "red") +
theme_void() +
theme(panel.background = element_rect(fill = "white", color = NA))
# Combine main + inset
final_map <- ggdraw() +
draw_plot(p_main) +
draw_plot(p_inset, x = 0.65, y = 0.7, width = 0.3, height = 0.3)
# Print the combined map
print(final_map)
# Filter states to those that touch the pj_range_buff
pj_states <- st_filter(us_states, pj_range_buff)
p_inset <- ggplot() +
geom_sf(data = pj_states, fill = "gray95", color = "black", size = 0.2) +
geom_sf(data = pj_range_buff, fill = "red", alpha = 0.3, color = "red") +
theme_void() +
theme(panel.background = element_rect(fill = "white", color = NA))
# Combine main + inset
final_map <- ggdraw() +
draw_plot(p_main) +
draw_plot(p_inset, x = 0.65, y = 0.7, width = 0.3, height = 0.3)
# Print the combined map
print(final_map)
pj_state_names <- pj_states$name
pj_states <- us_states %>%
filter(name %in% pj_state_names | name %in% "Washington")
# Filter states to those that touch the pj_range_buff
pj_states <- st_filter(us_states, pj_range_buff)
pj_state_names <- pj_states$name
pj_states <- us_states %>%
filter(name %in% pj_state_names | name %in% "Washington")
p_inset <- ggplot() +
geom_sf(data = pj_states, fill = "gray95", color = "black", size = 0.2) +
geom_sf(data = pj_range_buff, fill = "red", alpha = 0.3, color = "red") +
theme_void() +
theme(panel.background = element_rect(fill = "white", color = NA))
# Combine main + inset
final_map <- ggdraw() +
draw_plot(p_main) +
draw_plot(p_inset, x = 0.65, y = 0.7, width = 0.3, height = 0.3)
# Print the combined map
print(final_map)
# Filter states to those that touch the pj_range_buff
ol_states <- st_filter(us_states, pj_range_buff)
ol_state_names <- ol_states$name
pj_states <- us_states %>%
filter(name %in% ol_state_names | name %in% "Washington")
pj_range_buff_clip <- st_intersection(pj_range_buff, pj_states)
p_inset <- ggplot() +
geom_sf(data = pj_states, fill = "gray95", color = "black", size = 0.2) +
geom_sf(data = pj_range_buff_clip, fill = "red", alpha = 0.3, color = "red") +
theme_void() +
theme(panel.background = element_rect(fill = "white", color = NA))
# Combine main + inset
final_map <- ggdraw() +
draw_plot(p_main) +
draw_plot(p_inset, x = 0.65, y = 0.7, width = 0.3, height = 0.3)
# Print the combined map
print(final_map)
